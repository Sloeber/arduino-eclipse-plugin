<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="io.sloeber.managedbuilder" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="io.sloeber.managedbuilder" id="ManagedBuildTools" name="Managed Build Tools 2.0 (deprecated)"/>
      </appinfo>
      <documentation>
         The managed build information model describes targets, configurations, and toolchains for the build system.
      </documentation>
   </annotation>

   <element name="enumeratedOptionValue">
      <annotation>
         <documentation>
            Defines a single value of an enumerated option.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  Unique identifier for the option enumeration.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  A descriptive name for the enumeration.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="isDefault" type="boolean">
            <annotation>
               <documentation>
                  Flags this enumerated value as the default to apply to the option if the user has not changed the setting.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="command" type="string">
            <annotation>
               <documentation>
                  The command that the enumerated value translates to on the command line.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="option">
      <annotation>
         <documentation>
            An option is associated with a tool. Options can contain boolean values, a simple text string, a selection from an enumerated list, or a list of values. Options also map the value they contain to a command-line flag, such as &apos;-g&apos; in the case of debugging symbol information for compilers.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="enumeratedOptionValue"/>
            <element ref="listOptionValue"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  A unique identifier for the option.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  A descriptive name for the option.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="valueType" use="default" value="string">
            <annotation>
               <documentation>
                  General options can be one of the following types; &apos;string&apos; for catch-all entries for options that cannot be easily defined any other way, &apos;string list&apos; for entries that consist of a list of values such as defined symbols or paths, &apos;boolean&apos; for options that have two values, and &apos;enumerated&apos; for options that are one-of a list of values.

Additional special types exist to flag options of special relevance to the build model; &apos;include&apos;, &apos;libs&apos;, &apos;userObjs&apos; and &apos;definedSymbols&apos;. You can pre-populate with optionValues, and they will display in the UI the same way the &apos;stringList&apos; options do. The build model will look specifically for these value types when clients query for include paths and preprocessor defines. The makefile generator will treat the libs and userObjs entries differently than other stringLists.
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="string">
                  </enumeration>
                  <enumeration value="stringList">
                  </enumeration>
                  <enumeration value="boolean">
                  </enumeration>
                  <enumeration value="enumerated">
                  </enumeration>
                  <enumeration value="includePath">
                  </enumeration>
                  <enumeration value="definedSymbols">
                  </enumeration>
                  <enumeration value="libs">
                  </enumeration>
                  <enumeration value="userObjs">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
         <attribute name="category" type="string">
            <annotation>
               <documentation>
                  This is the id of the option category for this option.  The id can be the id of the tool which is also a category.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="defaultValue" type="string">
            <annotation>
               <documentation>
                  Specifies the default value for the option if the &apos;value&apos; field is blank. For enumerated options the optionEnums will be searched for the default. For string list options, all defined optionValues will be treated as defaults. For boolean values, specify truth using the string &apos;true&apos;. All other strings will be treated as false.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="command" type="string">
            <annotation>
               <documentation>
                  An optional value that specifies the actual command that will be passed to the tool on the command line.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="commandFalse" type="string">
            <annotation>
               <documentation>
                  An optional value, used only with options of type Boolean, that specifies the actual command that will be passed to the tool on the command line when the value of the Boolean option is False.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="browseType">
            <annotation>
               <documentation>
                  This value is used for list (and related) options only. If you need a list option to prompt the user to browse for a file or directory when adding a new value, set the value of the attribute accordingly. By default the value is treated as no browsing needed.
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="none">
                  </enumeration>
                  <enumeration value="file">
                  </enumeration>
                  <enumeration value="directory">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
         <attribute name="helpSupplier" type="string">
            <annotation>
               <documentation>
                  This field is unused in 2.0
               </documentation>
               <appinfo>
                  <meta.attribute kind="java"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="tip" type="string">
            <annotation>
               <documentation>
                  Specifies a &quot;tip&quot; that can be displayed in hover help or on the property page. Not implemented in 2.0.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="tool">
      <annotation>
         <documentation>
            Defines a tool used in the build process.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="option"/>
            <element ref="optionCategory"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  A unique identifier for the tool that will be used by the build model.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  Human-readable name for the tool to be used in the UI.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="sources" type="string">
            <annotation>
               <documentation>
                  A comma-separated list of file extensions that the tool will produce output for.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="outputs" type="string">
            <annotation>
               <documentation>
                  The extension that the tool will produce from a given input.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="command" type="string">
            <annotation>
               <documentation>
                  The command that invokes the tool. For example, gcc for the Gnu C compiler, or g++ for the Gnu C++ compiler.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="outputFlag" type="string">
            <annotation>
               <documentation>
                  An optional flag for tools that allow users to specify a name for the artifact of the tool. For example, the GCC compiler and linker tools typically allow the user to specify the name of the output with the &apos;-o&apos; flag, whereas the archiver that creates libraries does not.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="outputPrefix" type="string">
            <annotation>
               <documentation>
                  Some tools produce files with a special prefix that must be specified. For example, a librarian on POSIX systems expects the output to be lib&lt;target&gt;.a, so &apos;lib&apos; would be the prefix.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="dependencyCalculator" type="string">
            <annotation>
               <documentation>
                  This is an optional field that specifies the class that provides the source file dependency calculation for a given tool. You can replace the default calculator with a class that implements the &lt;code&gt;IManagedDependencyGenerator&lt;/code&gt; interface.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.cdt.managedbuilder.makegen.IManagedDependencyGenerator"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="headerExtensions" type="string">
            <annotation>
               <documentation>
                  A comma-separated list of file extensions that are used for header files. Since many other files depend on the interfaces defined in header files, the build system needs to be able to determine that a header file has changed to properly rebuild its dependents.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="natureFilter" use="required">
            <annotation>
               <documentation>
                  Filter the display (and use) of the tool by the nature of the project. Selecting a value of &apos;cnature&apos; insures that the tool will be displayed IFF there is a cnature associated with the project. A ccnature will filter this tool out. If &apos;ccnature&apos; is selected, the tool will only be available for C++ projects. If &apos;both&apos; is selected, the tool will be displayed when either nature is present.
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="cnature">
                  </enumeration>
                  <enumeration value="ccnature">
                  </enumeration>
                  <enumeration value="both">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
      </complexType>
   </element>

   <element name="target">
      <annotation>
         <documentation>
            Represents a type of resource that is the target of the build process, for example, a Linux static library. A target contains a sequence of tool definitions and configurations. Targets are arranged in an inheritance hierarchy where a target inherits the list of tools from it&apos;s parent and can add to or override tools in this list.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="tool"/>
            <element ref="configuration"/>
            <element ref="toolReference"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  Used by the build model to uniquely identify the target.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  A human-readable target name, such as &apos;Executable&apos;. This will be the name the user sees displayed in the UI.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="isAbstract" type="boolean" use="default" value="false">
            <annotation>
               <documentation>
                  This is a UI property.  If set to true, users should not be able to create project configurations targeted at this target.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="parent" type="string">
            <annotation>
               <documentation>
                  The id of a target that this tool inherits from.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="artifactName" type="string">
            <annotation>
               <documentation>
                  This is the name of the final build artifact associated with the target. The user will specify this is the UI, so there is no need to supply a default value.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="defaultExtension" type="string">
            <annotation>
               <documentation>
                  This is the extensionthat will be applied to any build artifact created by the target.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isTest" type="boolean">
            <annotation>
               <documentation>
                  A an optional field that flags a target as a test-only target. If true, the target will not appear in the UI.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="cleanCommand" type="string">
            <annotation>
               <documentation>
                  This attribute maintains the command that removes files for a particular target. For example, on POSIX targets like Linuc, Solaris, or Cygwin, the command would be &lt;code&gt;rm -rf&lt;/code&gt; whereas on Win32 platforms it would be &lt;code&gt;del /F /S /Q&lt;/code&gt;
               </documentation>
            </annotation>
         </attribute>
         <attribute name="makeCommand" type="string">
            <annotation>
               <documentation>
                  Specifies the default command to start the build utility for your toolchain. If the user changes this through the UI, the overriden value will be stored in the project build file. The build model will default to this value if the user ever resets a change.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="makeArguments" type="string">
            <annotation>
               <documentation>
                  Specifies the additional, default arguments that will be passed to the build utility when it is called by the builder. If the user changes the flags through the UI, the overriden value will be stored in the project build settings file. The build model will default to this value if the user ever resets a change.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="binaryParser" type="string">
            <annotation>
               <documentation>
                  Set this to the ID of the binary parser for the output format of your target. Currently there are only 2 choices: org.eclipse.cdt.core.ELF for *nix targets, and &quot;org.eclipse.cdt.core.PE64&quot; for targets that build for Windows, like Cygwin.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="osList" type="string">
            <annotation>
               <documentation>
                  This field is used by the managed build system to decide when to show the user the target. The value should be a comma-separated list. Current values are &quot;win32&quot;, &quot;linux&quot;, &quot;solaris&quot;, &quot;hpux&quot;, &quot;aix&quot; or &quot;any&quot;.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="archList" type="string">
            <annotation>
               <documentation>
                  This field is used by the managed build system to decide when to show the user the target. The value should be a comma-separated list. Current values include &quot;x86&quot;, &quot;sparc&quot;, &quot;ppc&quot;; or &quot;all&quot;.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="errorParsers" type="string">
            <annotation>
               <documentation>
                  Specifies the default list of error parsers to be used by projects created from this target.  It is an ordered, semi-colon separated list of parser IDs.  The order specifies the order in which the error parsers are invoked during a build.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="scannerInfoCollector" type="string">
            <annotation>
               <documentation>
                  Specifies a class that implements the &lt;code&gt;IManagedScannerInfoCollector&lt;/code&gt; for gathering the built-in compiler settings for a toolchain.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.cdt.managedbuilder.scannerconfig.IManagedScannerInfoCollector"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="makefileGenerator" type="string">
            <annotation>
               <documentation>
                  Allows you to supply a custom makefile generator that conforms to the &lt;code&gt;IManagedBuilderMakefileGenerator&lt;/code&gt; interface.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.cdt.managedbuilder.makegen.IManagedBuilderMakefileGenerator"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <sequence>
            <element ref="target"/>
            <element ref="tool"/>
            <element ref="configuration"/>
            <element ref="dynamicElementProvider"/>
            <element ref="managedBuildRevision"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="configuration">
      <annotation>
         <documentation>
            A configuration is used to gather together certain default tools and options to build  target a certain way. For example, a &quot;Debug&quot; configuration might supply tools with the options set to build with debugging symbols, whereas a &quot;Release&quot; configuration would supply tools with options set to create the best performance.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="toolReference"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  Unique identifier for the configuration.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  A descriptive name for the configuration to be used in the UI.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="toolReference">
      <annotation>
         <documentation>
            This is reserved for future use. It currently gets instantiated for saving tool settings.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="optionReference"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  The unique ID of the tool that the reference is for.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="command" type="string">
            <annotation>
               <documentation>
                  The overridden command for the tool the reference is for.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="outputs" type="string">
            <annotation>
               <documentation>
                  A comma-separated list of extensions that this tool reference will create. This completely overrides the the output extension in the tool the reference is for.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="outputPrefix" type="string">
            <annotation>
               <documentation>
                  The prefix that will be applied to the output of the tool. This completely overrides the output defined in the referenced tool.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="outputFlag" type="string">
            <annotation>
               <documentation>
                  Overrides the output flag of the referenced tool.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="optionReference">
      <annotation>
         <documentation>
            Option references hold onto information the user has changed through the UI. Not all fields will be populated, depending on the option type the reference overrides. For example, the &apos;name&apos; field is used by enumerated options only.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="listOptionValue"/>
            <element ref="enumeratedOptionValue"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  The unique ID of the option the reference is for.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="defaultValue" type="string">
            <annotation>
               <documentation>
                  This field is used to record the value of the option that the user has set in the build settings file. For example, if the user has set the verbose flag to true, the project&apos;s build settings file will contain an option reference for the verbose option, with the defaultvalue set to true.
&lt;p&gt;The attribute is also used to override the default option setting for a configuration in a toolchain. For example, a &apos;Debug&apos; configuration may setthe value of a debug flag differently than the default value defined in the tool.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="command" type="string">
            <annotation>
               <documentation>
                  This field is unused in 2.0
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="optionCategory">
      <annotation>
         <documentation>
            An optional, but useful, mechanism for grouping options together.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  Used by the build model to uniquely identify the option category.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  A human-readable category name, such as &apos;Preprocessor Options&apos;. This will be the name the user sees displayed in the UI.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="owner" type="string">
            <annotation>
               <documentation>
                  Option categories can belong to a tool or be nested inside other option categories. This is the ID of the owner of the category.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="listOptionValue">
      <annotation>
         <documentation>
            A value for defining individual elements of a list option.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="value" type="string" use="required">
            <annotation>
               <documentation>
                  The contents of the list item.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="builtIn" type="boolean">
            <annotation>
               <documentation>
                  This attribute flags the list value as a built-in value as opposed to something the user has entered. Built-ins will not be passed to clients that generate command lines (like the makefile generator). However, clients that need to take these settings into account (like the indexing service), will receive these settings. These values will appear grey in the UI.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="dynamicElementProvider">
      <annotation>
         <documentation>
            An optional element that allows a tool implementor to supply a class that creates one or more dynamic toolchain elements. For example, the class might create a new tool reference based on the contents of a special file, and a new target that uses that reference.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The class that implements the &lt;code&gt;IManagedConfigElementProvider&lt;/code&gt; interface. The logic of determining the elements is left to the implementer, but they must be correctly formed or the build model will have trouble loading.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.cdt.managedbuilder.core.IManagedConfigElementProvider"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  A meaningful name for the type of element being provided.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="managedBuildRevision">
      <annotation>
         <documentation>
            &lt;p&gt;
Version identifier for the managed build extension point. It is a string representation, consisting of three (3) tokens separated by a decimal point. The 3 tokens are positive integer numbers. For example, the following are valid version identifiers:
 &lt;ul&gt;
  &lt;li&gt;&lt;code&gt;0.0.0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;1.0.1234&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;1.9&lt;/code&gt; (interpreted as &lt;code&gt;1.9.0&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;3&lt;/code&gt; (interpreted as &lt;code&gt;3.0.0&lt;/code&gt;)&lt;/li&gt;
 &lt;/ul&gt;
&lt;/p&gt;
         </documentation>
      </annotation>
      <complexType>
         <attribute name="fileVersion" type="string" use="required">
            <annotation>
               <documentation>
                  The actual string containing the three version tokens.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         1.2
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         The following is an example of the extension point usage:
&lt;p&gt;
&lt;pre&gt;
   &lt;extension
         id=&quot;buildExample&quot;
         name=&quot;Tools for Build Example&quot;
         point=&quot;org.eclipse.cdt.core.ManagedBuildInfo&quot;&gt;
      &lt;target
            makeFlags=&quot;-k&quot;
            isTest=&quot;false&quot;
            cleanCommand=&quot;rm -rf&quot;
            name=&quot;Executable&quot;
            defaultExtension=&quot;.exe&quot;
            isAbstract=&quot;false&quot;
            makeCommand=&quot;make&quot;
            id=&quot;example.target.executable&quot;&gt;
         &lt;tool
               sources=&quot;C&quot;
               name=&quot;Compiler&quot;
               outputFlag=&quot;-o&quot;
               outputs=&quot;exe&quot;
               command=&quot;g++&quot;
               id=&quot;executable.compiler&quot;&gt;
            &lt;optionCategory
                  owner=&quot;executable.compiler&quot;
                  name=&quot;Flags&quot;
                  id=&quot;compiler.category.flags&quot;&gt;
            &lt;/optionCategory&gt;
            &lt;option
                  defaultValue=&quot;-c&quot;
                  name=&quot;Compiler Flags&quot;
                  category=&quot;compiler.category.flags&quot;
                  valueType=&quot;string&quot;
                  id=&quot;category.flags.comp_flags&quot;&gt;
            &lt;/option&gt;
         &lt;/tool&gt;
         &lt;configuration
               name=&quot;Default&quot;
               id=&quot;example.config.default&quot;&gt;
         &lt;/configuration&gt;
      &lt;/target&gt;
   &lt;/extension&gt;
&lt;/pre&gt;
      </documentation>
   </annotation>


   <annotation>
      <appinfo>
         <meta.section type="implementation"/>
      </appinfo>
      <documentation>
         An implementation of this extension point is supplied in &lt;samp&gt;org.eclipse.cdt.ui&lt;/samp&gt;
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="copyright"/>
      </appinfo>
      <documentation>
         Copyright (c) 2003, 2004 IBM Corporation and others.
This program and the accompanying materials are made available under the terms of the Eclipse Public License 2.0 which accompanies this distribution, and is available on the &lt;a href=&quot;http://www.eclipse.org/legal/epl-2.0/&quot;&gt; Eclipse&lt;/a&gt; website.
      </documentation>
   </annotation>

</schema>
