<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="io.sloeber.managedbuilder" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="io.sloeber.managedbuilder" id="buildDefinitions" name="Managed Build Definitions"/>
      </appinfo>
      <documentation>
         The managed build object model describes project-types, configurations, tool-chains, etc. for the managed build system.
      </documentation>
   </annotation>

   <element name="value">
      <annotation>
         <documentation>
            represents the property value
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  represents the property value id
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="listOptionValue">
      <annotation>
         <documentation>
            A value for defining individual elements of a list option.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="value" type="string" use="required">
            <annotation>
               <documentation>
                  The contents of the list item.  The build model will apply the command defined in the option to each value in the list.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="builtIn" type="boolean">
            <annotation>
               <documentation>
                  This attribute flags the list value as a built-in value as opposed to something the user has entered. Built-ins will not be passed to clients that generate command lines (like the makefile generator). However, clients that need to take these settings into account (like the indexing service), will receive these settings. These values will appear grey in the UI.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="option">
      <annotation>
         <documentation>
            An option is associated with a tool. Options can contain boolean values, a simple text string, a selection from an enumerated list, or a list of values. Options also map the value they contain to a command-line flag, such as &apos;-g&apos; in the case of debugging symbol information for compilers.
Options can also be associated with a toolchain. However in such a case the option must be contained in a optionCategory.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <choice>
               <element ref="listOptionValue" minOccurs="0" maxOccurs="unbounded"/>
               <element ref="enumeratedOptionValue" minOccurs="0" maxOccurs="unbounded"/>
               <element ref="treeOptionRoot" minOccurs="0" maxOccurs="1"/>
            </choice>
            <element ref="enablement" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  A unique identifier for the option.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  A descriptive name for the option.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="superClass" type="string">
            <annotation>
               <documentation>
                  The id of an option that this option is derived from.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isAbstract" type="boolean">
            <annotation>
               <documentation>
                  An optional field that flags an option as abstract.  An abstract option must be defined as a top level object in the model definition and cannot be selected by the user in the UI, but options derived from this option will inherit its attributes and children.  The default is false.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="unusedChildren" type="string">
            <annotation>
               <documentation>
                  A semi-colon separated list of child IDs of the superclass&apos; children that should not be automatically inherited by this element.  Note: This attribute is not yet implemented.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="category" type="string">
            <annotation>
               <documentation>
                  The id of the option category for this option. The id can be the id of the tool which is also a category.  The default category is the parent tool.  Note that an optionCategory id must be supplied as the value for an option that is a child of a toolChain.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="resourceFilter" use="default" value="all">
            <annotation>
               <documentation>
                  Filters the display (and use) of the option by the type of the resource (currently Project or File). The value &apos;project&apos; causes the option to be used when applied to a project.  The value &apos;file&apos; causes the option to be used when applied to a file. If &apos;all&apos; is selected, the option applies to all types of resources.  The default is &quot;all&quot;.
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="project">
                  </enumeration>
                  <enumeration value="file">
                  </enumeration>
                  <enumeration value="all">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
         <attribute name="valueType" use="default" value="string">
            <annotation>
               <documentation>
                  General options can be one of the following types; &apos;string&apos; for catch-all entries for options that cannot be easily defined any other way, &apos;string list&apos; for entries that consist of a list of values such as defined symbols or paths, &apos;boolean&apos; for options that have two values, and &apos;enumerated&apos; for options that are one-of a list of values.

Additional special types exist to flag options of special relevance to the build model; &apos;include&apos;, &apos;libs&apos;, &apos;userObjs&apos; and &apos;definedSymbols&apos;. You can pre-populate with optionValues, and they will display in the UI the same way the &apos;stringList&apos; options do. The build model will look specifically for these value types when clients query for include paths and preprocessor defines. The makefile generator treats the libs and userObjs entries differently than other stringLists.
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="string">
                  </enumeration>
                  <enumeration value="stringList">
                  </enumeration>
                  <enumeration value="boolean">
                  </enumeration>
                  <enumeration value="enumerated">
                  </enumeration>
                  <enumeration value="includePath">
                  </enumeration>
                  <enumeration value="definedSymbols">
                  </enumeration>
                  <enumeration value="libs">
                  </enumeration>
                  <enumeration value="userObjs">
                  </enumeration>
                  <enumeration value="symbolFiles">
                  </enumeration>
                  <enumeration value="includeFiles">
                  </enumeration>
                  <enumeration value="libPaths">
                  </enumeration>
                  <enumeration value="libFiles">
                  </enumeration>
                  <enumeration value="undefIncludePath">
                  </enumeration>
                  <enumeration value="undefDefinedSymbols">
                  </enumeration>
                  <enumeration value="undefLibPaths">
                  </enumeration>
                  <enumeration value="undefLibFiles">
                  </enumeration>
                  <enumeration value="undefIncludeFiles">
                  </enumeration>
                  <enumeration value="undefSymbolFiles">
                  </enumeration>
                  <enumeration value="tree">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
         <attribute name="browseType">
            <annotation>
               <documentation>
                  This value is used for string and stringlist (and related) options only. If you need a list option to prompt the user to browse for a file or directory when adding a new value, set the value of the attribute accordingly. By default the value is treated as no browsing needed.
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="none">
                  </enumeration>
                  <enumeration value="file">
                  </enumeration>
                  <enumeration value="directory">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
         <attribute name="browseFilterPath" type="string">
            <annotation>
               <documentation>
                  An optional value that specifies the default filter-path for the underlying file or directory browse-dialog. Macros in the value will be expanded. This attribute only applies when user chooses to browse the file-system.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="browseFilterExtensions" type="string">
            <annotation>
               <documentation>
                  An optional value that specifies a comma-separated string of file-extension filters for the underlying file browse-dialog. For filters with multiple extensions, use semicolon as a separator - eg. &quot;*.lib;*.a;*.cmd,*.*&quot;. This attribute only applies when user chooses to browse the file-system, and only when browseType is &apos;file&apos;.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="value" type="string">
            <annotation>
               <documentation>
                  Specifies the value assigned to the option by the end user or in a default configuration.  For boolean values, specify truth using the string &apos;true&apos;. All other strings will be treated as false.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="defaultValue" type="string">
            <annotation>
               <documentation>
                  Specifies the default value for the option if the &apos;value&apos; attribute is blank. For enumerated options the optionEnums will be searched for the default. For string list options, all defined optionValues will be treated as defaults. For boolean values, specify truth using the string &apos;true&apos;. All other strings will be treated as false.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="defaultValueGenerator" type="string">
            <annotation>
               <documentation>
                  Optional class which can be used to override the default value for an option. This class must implement the IOptionDefaultValueGenerator interface.  If no generator is specified then the &apos;defaultValue&apos; attribute is used to generate the option&apos;s default value.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":org.eclipse.cdt.managedbuilder.core.IOptionDefaultValueGenerator"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="command" type="string">
            <annotation>
               <documentation>
                  An optional value that specifies the actual command that will be passed to the tool on the command line.  The attribute value provides a &quot;pattern&quot; for specifying where the option &quot;value&quot; should be placed for options of type string and stringlist.  If no ${value} is specified in the command, the option value is appended to the end of the specified command.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="commandGenerator" type="string">
            <annotation>
               <documentation>
                  Optional class which can be used to override the default command-generation logic for an option.  This class must impelment the IOptionCommandGenerator interface.  If no generator is specified then the &apos;comand&apos; attribute is used to generate the option&apos;s command.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":org.eclipse.cdt.managedbuilder.core.IOptionCommandGenerator"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="commandFalse" type="string">
            <annotation>
               <documentation>
                  An optional value, used only with options of type Boolean, that specifies the actual command that will be passed to the tool on the command line when the value of the Boolean option is False.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="useByScannerDiscovery" type="boolean">
            <annotation>
               <documentation>
                  An optional field to allow the option additionally to be passed to scanner discovery of built-in compiler macros and paths. The default is false.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="helpSupplier" type="string">
            <annotation>
               <documentation>
                  This field is unused in 2.0
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" deprecated="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="tip" type="string">
            <annotation>
               <documentation>
                  Specifies a &quot;tip&quot; that can be displayed in hover help or on the property page.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="contextId" type="string">
            <annotation>
               <documentation>
                  specify a fully qualified context id for supplying context sensitive help for an option.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="valueHandler" type="string">
            <annotation>
               <documentation>
                  The id of a class that implements the IManagedOptionValueHandler interface.  This interface is used to dynamically manage the value of an option.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.cdt.managedbuilder.core.IManagedOptionValueHandler"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="valueHandlerExtraArgument" type="string">
            <annotation>
               <documentation>
                  An optional extra text string that is passed into the valueHandler.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="applicabilityCalculator" type="string">
            <annotation>
               <documentation>
                  Optional class which is used to determine dynamically at runtime whether the option is visible, enabled, and used in command line generation.  This class must implement the IOptionApplicability interface.  If no calculator is specified then the option is always visible, enabled, and used in command line generation.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.cdt.managedbuilder.core.IOptionApplicability"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="fieldEditor" type="string">
            <annotation>
               <documentation>
                  Optional ID of the custom field-editor to represent this build-option in the project Properties dialog UI.  If no custom field-editor ID is specified then the option will be represented by one of the built-in field-editors based on the option&apos;s &lt;code&gt;valueType&lt;/code&gt; attribute.

A custom field-editor needs to be registered, under the same ID, through the &lt;code&gt;org.eclipse.cdt.managedbuilder.ui.buildDefinitionsUI&lt;/code&gt; extension-point&apos;s &lt;code&gt;&amp;lt;fieldEditor&amp;gt;&lt;/code&gt; element.
               </documentation>
               <appinfo>
                  <meta.attribute kind="identifier" basedOn="org.eclipse.cdt.managedbuilder.ui.buildDefinitionsUI/fieldEditor/@id"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="fieldEditorExtraArgument" type="string">
            <annotation>
               <documentation>
                  An optional extra text string that is passed into the field-editor.  Can be used to parameterize the field-editor instance.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="tool">
      <annotation>
         <documentation>
            Defines a tool used in the build process.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="option" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="optionCategory" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="inputType" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="outputType" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="envVarBuildPath" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="enablement" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="supportedProperties" minOccurs="0" maxOccurs="1"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  A unique identifier for the tool that will be used by the build model.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  Human-readable name for the tool to be used in the UI.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="superClass" type="string">
            <annotation>
               <documentation>
                  The id of a tool that this tool is derived from.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isAbstract" type="boolean" use="default" value="false">
            <annotation>
               <documentation>
                  An optional field that flags a tool as abstract.  An abstract tool must be defined as a top level object in the model definition and cannot be selected by the user in the UI, but tools derived from this tool will inherit its attributes and children.  The default is false.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="outputFlag" type="string">
            <annotation>
               <documentation>
                  An optional flag for tools that allow users to specify a name for the artifact of the tool. For example, the GCC compiler and linker tools typically allow the user to specify the name of the output with the &apos;-o&apos; flag, whereas the archiver that creates libraries does not.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="natureFilter">
            <annotation>
               <documentation>
                  Filters the display (and use) of the tool by the nature of the project. Selecting a value of &apos;cnature&apos; insures that the tool will be displayed IFF there is a cnature associated with the project. A ccnature will filter this tool out. If &apos;ccnature&apos; is selected, the tool will only be available for C++ projects. If &apos;both&apos; is selected, the tool will be displayed when either nature is present.  This attribute is required if it is not inherited from its superClass.  The default value is &quot;both&quot;.
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="cnature">
                  </enumeration>
                  <enumeration value="ccnature">
                  </enumeration>
                  <enumeration value="both">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
         <attribute name="command" type="string">
            <annotation>
               <documentation>
                  The command that invokes the tool. For example, gcc for the Gnu C compiler, or g++ for the Gnu C++ compiler.  This attribute supports MBS file context macros.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="commandLinePattern" type="string">
            <annotation>
               <documentation>
                  Specifies the command &quot;pattern&quot; that indicates how the parts of the command line are used to create the entire command line.  The pattern consists of the replaceable variables COMMAND, FLAGS, OUTPUT_FLAG, OUTPUT_PREFIX, OUTPUT and INPUTS.  The default command line pattern is ${COMMAND} ${FLAGS} ${OUTPUT_FLAG}${OUTPUT_PREFIX}${OUTPUT} ${INPUTS}, except when customBuildStep is true, where the default is $(COMMAND). White space and other characters are significant and are copied to the generated command.  This attribute supports MBS file context macros.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="commandLineGenerator" type="string">
            <annotation>
               <documentation>
                  Specifies the name of the class that implements IManagedCommandLineGenerator in order to provide custom command line generation logic.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":org.eclipse.cdt.managedbuilder.core.IManagedCommandLineGenerator"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="GeneratesDependencies" type="boolean">
            <annotation>
               <documentation>
                  Does this tool generate dependency files.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="errorParsers" type="string">
            <annotation>
               <documentation>
                  Specifies the default list of error parsers used by the tool.  Error parsers specified by the tool are added to this list specified by the tool-chain when a project resource is defined to use the tool.  It is automatically removed when there are no more project resources using the tool.  It is an ordered, semi-colon separated list of parser IDs.  The order specifies the order in which the error parsers are invoked during a build.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="advancedInputCategory" type="boolean">
            <annotation>
               <documentation>
                  Specifies whether the Tool wants the MBS to display the Advanced Input category with the Tool&apos;s property categories.  This allows the user to specify input order and additional inputs.  The default is false.  Note:  This attribute is not yet implemented
               </documentation>
            </annotation>
         </attribute>
         <attribute name="customBuildStep" type="boolean">
            <annotation>
               <documentation>
                  Specifies whether this Tool represents a user-define custom build step.  The default is false.  When True, the default value of the commandLinePattern attribute changes to &quot;$(command)&quot;.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="announcement" type="string">
            <annotation>
               <documentation>
                  Specifies a string that is written to the build output prior to each invocation of the tool.  The default value is &quot;Invoking tool-name (tool-id)...&quot;
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="icon" type="string">
            <annotation>
               <documentation>
                  Path to a 16x16 pixel big icon that is to be displayed instead of the default icon. The path is relative to the plug-in directory which defines .buildDefinitions.
               </documentation>
               <appinfo>
                  <meta.attribute kind="resource"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="supportsManagedBuild" type="boolean">
            <annotation>
               <documentation>
                  Specifies whether or not the tool supports managed build. Default value is true.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isSystem" type="boolean">
            <annotation>
               <documentation>
                  the system elements are used by the system for specific needs and are not displayed in UI
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isHidden" type="boolean">
            <annotation>
               <documentation>
                  Specifies whether or not the tool is hidden within the setting tab of the user interface. This attribute should be set to true when a tool is internal to the toolchain and options cannot be changed by the user. Default value is false.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="toolChain">
      <annotation>
         <documentation>
            A tool-integrator-defined, ordered set of tools that tranform the project&apos;s resources into the project&apos;s outputs.  A tool-chain can be defined as part of a configuration, or as an independent specification that is referenced from a separate configuration via the tool-chain superClass attribute.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="tool" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="targetPlatform" minOccurs="0" maxOccurs="1"/>
            <element ref="builder" minOccurs="0" maxOccurs="1"/>
            <element ref="optionCategory" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="option" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="supportedProperties" minOccurs="0" maxOccurs="1"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  Unique identifier for the tool-chain.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  A descriptive name for the tool-chain to be used in the UI.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="superClass" type="string">
            <annotation>
               <documentation>
                  The id of a toolChain that this toolChain is derived from.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isAbstract" type="boolean" use="default" value="false">
            <annotation>
               <documentation>
                  An optional field that flags a tool-chain as abstract.  An abstract tool-chain must be defined as a top level object in the model definition and cannot be selected by the user in the UI, but tool-chains derived from this tool-chain will inherit its attributes and children.  The default is false.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="unusedChildren" type="string">
            <annotation>
               <documentation>
                  A semi-colon separated list of child IDs of the superclass&apos; children that should not be automatically inherited by this element.  Note: This attribute is not yet implemented.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="osList" type="string">
            <annotation>
               <documentation>
                  This field lists the host operating systems on which the tool-chain runs and is used by the managed build system to decide when the tool-chain is applicable.  The value should be a comma-separated list.  Valid values are the strings returned by the Eclipse API Platform.getOS() and include strings like &quot;win32&quot;, &quot;linux&quot;, &quot;solaris&quot;, &quot;hpux&quot;, &quot;aix&quot;.  Do not specify this attribute or specify &quot;all&quot; to allow all host operating systems.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="archList" type="string">
            <annotation>
               <documentation>
                  This field lists the host architectures on which the tool-chain runs and is used by the managed build system to decide when the tool-chain is applicable.  The value should be a comma-separated list.  Valid values are the strings returned by the Eclipse API Platform.getOSArch() and include strings like &quot;ia32&quot;.  Do not specify this attribute or specify &quot;all&quot; to allow all host architectures.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="errorParsers" type="string">
            <annotation>
               <documentation>
                  The semi-colon separated list of the default error parsers to be used with this tool-chain.  The list is ordered with the first error parser on the list invoked first, the second error parser second, and so on.  The list may contain the error parsers defined by CDT and/or other installed error parser extensions.  When specified, this overrides the tool errorParsers attributes of the tool children of the tool-chain and the builder child of the tool-chain.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="languageSettingsProviders" type="string">
            <annotation>
               <documentation>
                  Semicolon-separated list of providers ID implementing ILanguageSettingProvider interface. This list could be adjusted on configuration level in the corresponding attribute.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="scannerConfigDiscoveryProfileId" type="string">
            <annotation>
               <documentation>
                  Specifies an id of scanner configuration discovery profile for gathering the built-in compiler settings for a toolchain.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="targetTool" type="string">
            <annotation>
               <documentation>
                  Specifies a semi-colon separated list of the Tool(s) that can create the final build artifact (the end target of the build).  The first tool found in the configuration is used.  A list is needed, for example, when a tool-chain has different tools for different project natures.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="secondaryOutputs" type="string">
            <annotation>
               <documentation>
                  A semi-colon separated list of IDs of other outputTypes, besides the primary outputType of the targetTool, that are also considered to be build artifacts.  The build file generator will ensure that the outputs get built.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isToolChainSupported" type="string">
            <annotation>
               <documentation>
                  Specifies the name of the class that implements IManagedIsToolChainSupported.  This provides a method to be called to determine if support for the tool-chain is currently installed on the system.  MBS uses this information in order to filter the choices presented to the CDT user and to inform the user when support needed by their project is not installed. If the isToolChainSupported callback is not provided by the tool-chain definition, the tool-chain is treated as supported.  If all configurations defined for the given project type are not supported the project type is treated as unsupported.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.cdt.managedbuilder.core.IManagedIsToolChainSupported"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="configurationEnvironmentSupplier" type="string">
            <annotation>
               <documentation>
                  Specifies the name of the class that implements IConfigurationEnvironmentVariableSupplier in order to provide configuration level environment variables.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.cdt.managedbuilder.envvar.IConfigurationEnvironmentVariableSupplier"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="configurationMacroSupplier" type="string">
            <annotation>
               <documentation>
                  Specifies the name of the class that implements IConfigurationBuildMacroSupplier in order to provide configuration level build macros.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.cdt.managedbuilder.macros.IConfigurationBuildMacroSupplier"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="versionsSupported" type="string">
            <annotation>
               <documentation>
                  Specifies a comma delimited list of versions of this tool-chain that can be loaded without invoking a converter.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="convertToId" type="string">
            <annotation>
               <documentation>
                  The identifier of a tool-chain, that tool-chains loaded using this definition should be converted to. MBS will invoke a proper converter.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="optionPathConverter" type="string">
            <annotation>
               <documentation>
                  Toolchains like Cygwin based Gnu tools can accept paths which are not valid for the OS platform. E.g. &quot;/usr/include&quot; is well difined for a Cygwin gcc compiler while it is not a meaningful path for a java.io.File. Therefore toolchains can specify a pathConverter which will be applied to include and library paths configured in the Managed Build System.

The pathConverter of a toolchain applies for all tools of the toolchain except if a tool defines it&apos;s own pathConverter. In this case the pathConverter supplied by the toolchain is ignored.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.cdt.managedbuilder.core.IPathConverter"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="supportsManagedBuild" type="boolean">
            <annotation>
               <documentation>
                  Specifies whether or not the tool-chain supports managed build. Default value is true.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isSystem" type="boolean">
            <annotation>
               <documentation>
                  the system elements are used by the system for specific needs and are not displayed in UI
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="configuration">
      <annotation>
         <documentation>
            A configuration is used to gather together certain default tools and options to build project a certain way. For example, a &quot;Debug&quot; configuration might supply tools with the options set to build with debugging symbols, whereas a &quot;Release&quot; configuration would supply tools with options set to create the best performance.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="toolChain" minOccurs="0" maxOccurs="1"/>
            <element ref="resourceConfiguration" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="enablement" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="folderInfo" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="fileInfo" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  Unique identifier for the configuration.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  A descriptive name for the configuration to be used in the UI.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="parent" type="string">
            <annotation>
               <documentation>
                  The configuration that this configuration was cloned from.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="artifactName" type="string">
            <annotation>
               <documentation>
                  This is the name of the final build artifact associated with the configuration. The user will specify this is the UI, so there is no need to supply a default value.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="artifactExtension" type="string">
            <annotation>
               <documentation>
                  This is the extension that will be applied (if necessary) to any build artifact created by the configuration.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="cleanCommand" type="string">
            <annotation>
               <documentation>
                  This attribute maintains the command that removes the intermediate and output files for a particular configuration. For example, on POSIX platforms like Linuc, Solaris, or Cygwin, the command would be &lt;code&gt;rm -rf&lt;/code&gt; whereas on Win32 platforms it would be &lt;code&gt;del /F /S /Q&lt;/code&gt;
               </documentation>
            </annotation>
         </attribute>
         <attribute name="errorParsers" type="string">
            <annotation>
               <documentation>
                  The semi-colon separated list of the default error parsers to be used with this configuration.  The list is ordered with the first error parser on the list invoked first, the second error parser second, and so on.  The list may contain the error parsers defined by CDT and/or other installed error parser extensions.  The list of error parsers to be used may be changed by the user on a per-configuration basis.  When specified, this overrides the tool-chain errorParsers attribute.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="languageSettingsProviders" type="string">
            <annotation>
               <documentation>
                  Semicolon-separated list of providers ID implementing ILanguageSettingProvider interface.
This field could be amended with toolchain-level providers list by using ${Toolchain} keyword.  Provider ID can be prefixed with &quot;-&quot; which will cause id to be removed from the preceeding list including providers defined with ${Toolchain} keyword.
If this field is not specified, &quot;org.eclipse.cdt.managedbuilder.core.MBSLanguageSettingsProvider&quot; (MBS Language Settings Provider) is used by default.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="prebuildStep" type="string">
            <annotation>
               <documentation>
                  Specifies the pre-build command, which runs prior to the standard MBS build.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="postbuildStep" type="string">
            <annotation>
               <documentation>
                  Specifies the post-build command, which runs after the standard MBS build.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="preannouncebuildStep" type="string">
            <annotation>
               <documentation>
                  Specifies the string to be displayed when the pre-build command step is run.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="postannouncebuildStep" type="string">
            <annotation>
               <documentation>
                  Specifies the string to be displayed when the post-build command step is run.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="description" type="string">
            <annotation>
               <documentation>
                  Specifies the description of the configuration that will be displayed to the user while creating a project and managing configurations.  The description is only displayed in the UI - it is not considered to be part of the configuration name.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="buildProperties" type="string">
            <annotation>
               <documentation>
                  Specifies the comma-separated list of build property type - value pairs defined for this configuration.
property type-value pairs are specified in the type_id=value_id format.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="buildArtefactType" type="string">
            <annotation>
               <documentation>
                  the attribute specified the Build Artefact Type. can contain the value id of the &quot;org.eclipse.cdt.build.core.buildArtefactType&quot; build property. Default values contributed with the build system are 
&quot;org.eclipse.cdt.build.core.buildArtefactType.exe&quot; - represents executable,
&quot;org.eclipse.cdt.build.core.buildArtefactType.staticLib&quot; - represents static library,
&quot;org.eclipse.cdt.build.core.buildArtefactType.sharedLib&quot; - represents dynamic library
Custom values can be contributed via the &quot;org.eclipse.cdt.managedbuilder.core.buildProperties&quot; extension point. See the description of that extension point for more detail. 

Specifying this attribute is fully equivalent to specifying the &quot;org.eclipse.cdt.build.core.buildArtefactType&quot; via tne buildProperties attribute. The buildArtefactType attribute, the &quot;buildArtefactType&quot; attribute value takes precedence over the artefact type specified via the &quot;buildProperties&quot; attribute
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="projectType">
      <annotation>
         <documentation>
            Represents a class of project which acts as a template for the projects that the user will create, for example, a Linux static library. A project type contains a sequence of configurations. Project types are arranged in an inheritance hierarchy where a project type inherits the list of configurations from it&apos;s parent and can add to or override configurations in this list.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="configuration" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  Used by the build model to uniquely identify the project type.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  A human-readable project type name, such as &apos;Executable&apos;. This will be the name the user sees displayed in the UI.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="superClass" type="string">
            <annotation>
               <documentation>
                  The id of a projectType that this projectType is derived from.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isAbstract" type="boolean" use="default" value="false">
            <annotation>
               <documentation>
                  An optional field that flags a project type as abstract.  If true, the project type will not appear in the UI.  The project type is used by other project types as their &quot;superclass&quot;.  The default value is false.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="unusedChildren" type="string">
            <annotation>
               <documentation>
                  A semi-colon separated list of child IDs of the superclass&apos; children that should not be automatically inherited by this element.  Note: This attribute is not yet implemented.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isTest" type="boolean">
            <annotation>
               <documentation>
                  An optional field that flags a project type as test-only. If true, the project type will not appear in the UI.  The project type can be manipulated programmatically in JUnit tests, for example.  The default value is false.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="projectEnvironmentSupplier" type="string">
            <annotation>
               <documentation>
                  Specifies the name of the class that implements IProjectEnvironmentVariableSupplier in order to provide project level environment variables.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.cdt.managedbuilder.envvar.IProjectEnvironmentVariableSupplier"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="projectMacroSupplier" type="string">
            <annotation>
               <documentation>
                  Specifies the name of the class that implements IProjectBuildMacroSupplier in order to provide project level build macros.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.cdt.managedbuilder.macros.IProjectBuildMacroSupplier"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="configurationNameProvider" type="string">
            <annotation>
               <documentation>
                  Contains the name of a class that implements an interface with a method for returning a default name for a configuration.  The configuration names in a user&apos;s project must be unique.  A projectType can contain configuration children with the same name.  In this case, a configurationNameProvider must be specified to make the names unique before they are displayed to the user in the New Project and New Configuration dialog boxes.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.cdt.managedbuilder.core.IConfigurationNameProvider"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="convertToId" type="string">
            <annotation>
               <documentation>
                  The identifier of a projectType, that project types loaded using this definition should be converted to. MBS will invoke a proper converter.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="buildProperties" type="string">
            <annotation>
               <documentation>
                  Specifies the comma-separated list of build property type - value pairs to be applied for all configurations of this project type.
property type-value pairs are specified in the type_id=value_id format.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="buildArtefactType" type="string">
            <annotation>
               <documentation>
                  the attribute specified the Build Artefact Type. can contain the value id of the &quot;org.eclipse.cdt.build.core.buildArtefactType&quot; build property. Default values contributed with the build system are 
&quot;org.eclipse.cdt.build.core.buildArtefactType.exe&quot; - represents executable,
&quot;org.eclipse.cdt.build.core.buildArtefactType.staticLib&quot; - represents static library,
&quot;org.eclipse.cdt.build.core.buildArtefactType.sharedLib&quot; - represents dynamic library
Custom values can be contributed via the &quot;org.eclipse.cdt.managedbuilder.core.buildProperties&quot; extension point. See the description of that extension point for more detail. 

Specifying this attribute is fully equivalent to specifying the &quot;org.eclipse.cdt.build.core.buildArtefactType&quot; via tne buildProperties attribute. The buildArtefactType attribute, the &quot;buildArtefactType&quot; attribute value takes precedence over the artefact type specified via the &quot;buildProperties&quot; attribute
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <sequence>
            <element ref="projectType" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="configuration" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="toolChain" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="tool" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="targetPlatform" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="builder" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="dynamicElementProvider" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="managedBuildRevision" minOccurs="0" maxOccurs="1"/>
            <element ref="buildDefinitionStartup" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="project">
      <annotation>
         <documentation>
            The project element is an instance of a projectType element.  It appears in the .cdtbuild file, not in an extension definition.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="configuration" minOccurs="1" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  The name of the project that the user sees displayed in the UI.  This is the name that the user entered in the New Project wizard.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="projectType" type="string" use="required">
            <annotation>
               <documentation>
                  The id of the projectType that this project is an instance of.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="resourceConfiguration">
      <annotation>
         <documentation>
            A place to store build attributes of individual resources that are different from the configuration as a whole.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="tool" minOccurs="1" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="resourcePath" type="string" use="required">
            <annotation>
               <documentation>
                  The path of the project resource to which this element applies.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="exclude" type="boolean">
            <annotation>
               <documentation>
                  Specifies whether the resource is excluded from building in the parent configuration.  The default is false.  The resourceConfiguration element retains its tool children, if any exist, even when excluded from the build.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="rcbsApplicability">
            <annotation>
               <documentation>
                  Identifies how the user desires to apply a resource custom build step:
     1.  Apply rcbs tool before any other tools defined for the resource.
     2.  Apply rcbs tool after any other tools defined for the resource.
     3.  Apply rcbs tool overriding any other tools defined for the resource.
     4.  Disable (don&apos;t apply) the rcbs tool.
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="before">
                  </enumeration>
                  <enumeration value="after">
                  </enumeration>
                  <enumeration value="override">
                  </enumeration>
                  <enumeration value="disable">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
         <attribute name="toolsToInvoke" type="string">
            <annotation>
               <documentation>
                  Identifies which tools to invoke by a semicolon separated list of child tool ids.  Applies as follows:
     1.  Defaults to all tools in the order found
     2.  Use specified ordered list of children to invoke
     3.  If empty string, treat as if no resource configuration existed, i.e., use project level tool.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="inputType">
      <annotation>
         <documentation>
            Defines a type of input for the tool.  Note that the calculated dependencies of an input type are not described by a separate input type, but are described by attributes of this element.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="inputOrder" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="additionalInput" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="enablement" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  A unique identifier for the input-type that will be used by the build model.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  The name of the input type that is displayed to the user in the UI.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="superClass" type="string">
            <annotation>
               <documentation>
                  The id of an input-type that this input-type is derived from.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="sourceContentType" type="string">
            <annotation>
               <documentation>
                  The id of an Eclipse content type that describes this type of input.  Either this attribute or the sources attribute must be specified by this element or a superclass.  If both are specified, and the content type specified here is defined by Eclipse, the sources attribute is not used.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="sources" type="string">
            <annotation>
               <documentation>
                  A comma-separated list of file extensions that identify files of this input type. Note that the user will not be able to modify the set of file extensions as they can when sourceContentType is specified.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="dependencyContentType" type="string">
            <annotation>
               <documentation>
                  The id of an Eclipse content type that describes the calculated dependencies for this type of input.  If dependencyExtensions is also specified, and the content type specified here is defined by Eclipse, the dependencyExtensions attribute is not used.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="dependencyExtensions" type="string">
            <annotation>
               <documentation>
                  A comma-separated list of file extensions that are used for calculated dependencies of this input-type. Note that the user will not be able to modify the set of file extensions as they can when dependencyContentType is specified.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="option" type="string">
            <annotation>
               <documentation>
                  The id of an Option element that is used on the command line to identify inputs of this type.  If specified, the name(s) of the input files for this input type are taken from the value specified for the option.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="assignToOption" type="string">
            <annotation>
               <documentation>
                  The id of an Option element whose value is to be assigned to the file(s) calculated for this input type.  The default is not to assign the input file(s) to a command line option but to assign the files to the ${Inputs} part of the command line.  Note that the option value is only updated during build file generation and therefore could be out of sync with the project until build file generation occurs.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="multipleOfType" type="boolean">
            <annotation>
               <documentation>
                  Specifies whether all inputs of this type are used in one invocation of the tool. The inputs can be project resources, and the outputs of other Tools in the Tool-chain. The default is false.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="scannerConfigDiscoveryProfileId" type="string">
            <annotation>
               <documentation>
                  Specifies an id of scanner configuration discovery profile for gathering the built-in compiler settings for resource type presented with this input type.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="languageId" type="string">
            <annotation>
               <documentation>
                  Represents the language id, i.e. the id of language defined via the org.eclipse.cdt.core.language extension point

The value of this attribute is used only in case languageInfoCalculator is not specified
               </documentation>
            </annotation>
         </attribute>
         <attribute name="languageInfoCalculator" type="string">
            <annotation>
               <documentation>
                  Specifies the name of the class that implements org.eclipse.cdt.managedbuilder.core.ILanguageInfoCalculator for dinamic providing the language id info.
Overrides language id specified with the languageId attribute.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":org.eclipse.cdt.managedbuilder.core.ILanguageInfoCalculator"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="inputOrder">
      <annotation>
         <documentation>
            Describes optional, ordering, information regarding the inputs of an inputType.  Note:  This element is not yet implemented
         </documentation>
      </annotation>
      <complexType>
         <attribute name="path" type="string" use="required">
            <annotation>
               <documentation>
                  Defines the relative or absolute path of the resource to which this element applies.  The resource must be a member of the project, or the output from another tool in the tool-chain.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="order" type="string">
            <annotation>
               <documentation>
                  A comma-separated list of integer values that specify the input order of this resource.  In most cases, a single value is used.  A list is used if the same input resource appears multiple times in the input list.  The order number begins at 1.  All unordered input resources fill the first gap in the specified order values.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="excluded" type="boolean">
            <annotation>
               <documentation>
                  If True, this input resource is not used as an input to the tool.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="additionalInput">
      <annotation>
         <documentation>
            Describes optional information regarding additional inputs and/or dependencies.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="paths" type="string" use="required">
            <annotation>
               <documentation>
                  Defines a semi-colon delimited list of relative or absolute paths of the resource to which this element applies.  The resources must be a member of the project, the output from another tool in the tool-chain, or an external file.  The file name of the path can use GNU Make pattern rule syntax in order to generate the name from the filename of the input file.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="kind">
            <annotation>
               <documentation>
                  Defines the type of additional input, whether the resource is added to the dependency list, the inputs on the command line, or both.  The default is to add the inputs to both.
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="additionalinput">
                  </enumeration>
                  <enumeration value="additionalinputdependency">
                  </enumeration>
                  <enumeration value="additionaldependency">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
      </complexType>
   </element>

   <element name="outputType">
      <annotation>
         <documentation>
            Defines a type of output for a tool.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="enablement" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  A unique identifier for the output-type that will be used by the build model.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  The name of the output type that is displayed to the user in the UI.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="superClass" type="string">
            <annotation>
               <documentation>
                  The id of an output-type that this output-type is derived from.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="outputContentType" type="string">
            <annotation>
               <documentation>
                  The id of an Eclipse content type that describes this type of output.  Either this attribute or the outputs attribute must be specified by this element or a superclass.  If both are specified, and the content type specified here is defined by Eclipse, the outputs attribute is not used.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="outputs" type="string">
            <annotation>
               <documentation>
                  The file extension that identify files of this output type. Note that the user will not be able to modify the set of file extensions as they can when outputContentType is specified.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="option" type="string">
            <annotation>
               <documentation>
                  The id of an Option element that is used on the command line to specify this output. The default is to use the Tool outputFlag attribute if primaryOutput is True. If option is not specified, and primaryOutput is False, then the output file(s) of this outputType are not added to the command line.  If specified, the nameProvider, namePattern and outputNames are ignored.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="outputPrefix" type="string">
            <annotation>
               <documentation>
                  Some tools produce files with a special prefix that must be specified. For example, a librarian on POSIX systems expects the output to be libtarget.a, so &apos;lib&apos; would be the prefix.  The default is to use the Tool &quot;outputPrefix&quot; attribute if primaryOutput is True, otherwise the default is an empty string.  This attribute supports MBS configuration context macros.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="outputName" type="string">
            <annotation>
               <documentation>
                  The output file name generated for this outputType. If specified, the namePattern is ignored.  This attribute supports MBS file context macros.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="namePattern" type="string">
            <annotation>
               <documentation>
                  Specifies a pattern, using the Gnu Make pattern rule syntax, for deriving the output resource name from the input resource name. The default, &quot;%&quot; is to use the input resource base name with the first output extension.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="nameProvider" type="string">
            <annotation>
               <documentation>
                  The name of the class that implements the &lt;code&gt;IManagedOutputNameProvider&lt;/code&gt; interface.  If specified, the outputNames and namePattern are ignored.  When multipleOfType is true, this attribute, or the outputNames attribute, is required in order for MBS to know the names of the output files.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.cdt.managedbuilder.core.IManagedOutputNameProvider"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="buildVariable" type="string">
            <annotation>
               <documentation>
                  A variable used in the build file to represent the output file(s).  The same variable name can be used in an inputType element to identify a set of output files that contribute to a tool&apos;s input.  The default name is chosen by MBS.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="optionCategory">
      <annotation>
         <documentation>
            An optional, but useful, mechanism for grouping options together.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="enablement" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  Used by the build model to uniquely identify the option category.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  A human-readable category name, such as &apos;Preprocessor Options&apos;. This will be the name the user sees displayed in the UI.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="owner" type="string">
            <annotation>
               <documentation>
                  Option categories can belong to a tool, a toolChain or be nested inside other option categories. This is the ID of the owner of the category.  The default owner if the parent tool or tool-chain.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="icon" type="string">
            <annotation>
               <documentation>
                  Path to a 16x16 pixel big icon that is to be displayed instead of the default icon.
The path is relative to the plug-in directory which defines .buildDefinitions.
               </documentation>
               <appinfo>
                  <meta.attribute kind="resource"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="applicabilityCalculator" type="string">
            <annotation>
               <documentation>
                  Optional class which is used to determine dynamically at runtime whether the option category is visible.  This class must implement the IOptionCategoryApplicability interface.  If no calculator is specified then the option category is always visible.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":org.eclipse.cdt.managedbuilder.core.IOptionCategoryApplicability"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="enumeratedOptionValue">
      <annotation>
         <documentation>
            Defines a single value of an enumerated option.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="enablement" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  Unique identifier for the option enumeration.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  A descriptive name for the enumeration.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="isDefault" type="boolean">
            <annotation>
               <documentation>
                  Flags this enumerated value as the default to apply to the option if the user has not changed the setting.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="command" type="string">
            <annotation>
               <documentation>
                  The command that the enumerated value translates to on the command line.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="treeOption">
      <complexType>
         <sequence minOccurs="0" maxOccurs="unbounded">
            <element ref="treeOption"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  The id should be the value used for determining which treeOption is selected, it has to be unique within the tree.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  Display name for the option
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="description" type="string">
            <annotation>
               <documentation>
                  Description of the option to be presented to the user
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="command" type="string">
            <annotation>
               <documentation>
                  The command that the tree value translates to on the command line.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isDefault" type="boolean">
            <annotation>
               <documentation>
                  Flags this tree value as the default to apply to the option if the user has not changed the setting.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="icon" type="string">
            <annotation>
               <documentation>
                  An icon to be used for this node in the tree representation. Should use full path for the icon: e.g., platform:/plugin/org.eclipse.cdt/icons/wizard.png
               </documentation>
               <appinfo>
                  <meta.attribute kind="resource"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="order" type="string">
            <annotation>
               <documentation>
                  An integer representing the order of this option within its peers in the tree. The order is a relative number, were smaller numbers appear on top of larger numbers.
If no order is defined a default order is assumed, see &quot;org.eclipse.cdt.managedbuilder.core.IOption.ITreeOption.DEFAULT_ORDER&quot; for more details.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="treeOptionRoot">
      <annotation>
         <documentation>
            Represents the root of a tree of options. Note that the root is never shown to the user and can&apos;t be selected. It is a place holder for settings affecting the options tree behavior
         </documentation>
      </annotation>
      <complexType>
         <sequence minOccurs="1" maxOccurs="unbounded">
            <element ref="treeOption"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="icon" type="string">
            <annotation>
               <documentation>
                  The tree root icon can be used in branding the UI representation of the tree. Should use full path for the icon: e.g., platform:/plugin/org.eclipse.cdt/icons/wizard.png
               </documentation>
               <appinfo>
                  <meta.attribute kind="resource"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="selectLeafOnly" type="boolean">
            <annotation>
               <documentation>
                  Determines whether this tree allows selecting categories as well as leaf nodes, or leaf nodes only.
Default is true (leaf nodes only).
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="builder">
      <annotation>
         <documentation>
            Represents the utility that drives the build process (typically, but not necessarily, a variant of &quot;make&quot;).
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="option" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  A unique identifier for the builder that will be used by the build model.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  Human-readable name for the builder to be used in the UI.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="superClass" type="string">
            <annotation>
               <documentation>
                  The id of a builder that this builder is derived from.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isAbstract" type="boolean" use="default" value="false">
            <annotation>
               <documentation>
                  An optional field that flags a builder as abstract.  An abstract builder must be defined as a top level object in the model definition and cannot be selected by the user in the UI, but builders derived from this builder will inherit its attributes and children.  The default is false.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="unusedChildren" type="string">
            <annotation>
               <documentation>
                  A semi-colon separated list of child IDs of the superclass&apos; children that should not be automatically inherited by this element.  Note: This attribute is not yet implemented.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="command" type="string">
            <annotation>
               <documentation>
                  Specifies the default command to start the build utility for your toolchain. If the user changes this through the UI, the overriden value will be stored in the project build file. The build model will default to this value if the user ever resets a change.  The default is &apos;make&apos;.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="arguments" type="string">
            <annotation>
               <documentation>
                  Specifies the additional, default arguments that will be passed to the build utility when it is called by the builder. If the user changes the flags through the UI, the overriden value will be stored in the project build settings file. The build model will default to this value if the user ever resets a change.  The default is &apos;-k&apos;.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="buildfileGenerator" type="string">
            <annotation>
               <documentation>
                  Allows you to supply a custom build file generator that conforms to the &lt;code&gt;IManagedBuilderMakefileGenerator&lt;/code&gt; interface.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.cdt.managedbuilder.makegen.IManagedBuilderMakefileGenerator"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="errorParsers" type="string">
            <annotation>
               <documentation>
                  Specifies the default list of error parsers used by the builder.  These error parsers are added to this list specified by the parent tool-chain.  It is an ordered, semi-colon separated list of parser IDs.  The order specifies the order in which the error parsers are invoked during a build.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="variableFormat" type="string">
            <annotation>
               <documentation>
                  The value of this attribute should be set to the expression representing the builder variable format. For example, to generate macros with the ${macro} format, the attribute would contain ${=}.  To generate macros with the @macro format, the attribute would contain @=.
This information would be used wile buildfile generation to keep the environment build macros unresolved in the makefile.
If the attribute is not specified or contains the empty string, this would mean that the builder can not treat environment variables as its own variables. In this case, the build macros that contain environment variables are resolved by MBS to their actual value.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isVariableCaseSensitive" type="boolean" use="default" value="false">
            <annotation>
               <documentation>
                  Specifies whether the builder variables are case sensitive or not. Can be set to either &quot;true&quot; or &quot;false&quot;. The default is &quot;true&quot;. If the builder does not support case-sensitive variables and there are some build environment variables that differ only in case (Environment variables on Unix-like operating systems are case sensitive), then those macros will always get resolved in the buildfile.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="reservedMacroNames" type="string">
            <annotation>
               <documentation>
                  Comma-separated list of reserved macro names. The macro name could contain either the exact name or the java regular expression. The latter could be used to supply the pattern of variable names that are generated by MBS in case the &quot;buildVariable&quot; attribute of the &quot;InputType&quot; element is not specified, etc. 
If this attribute is specified and the reservedMacroNameSupplier is not specified, the following macro names will be treated as reserved:
1. a macro name that is equal to one of the names specified in the reservedMacroNames value
2. a macro name that matches one of the regexp patterns specified in the reservedMacroNames value
3. a macro name that is equal to one of the build variable names specified InputType elements of the tools used in the tool-chain
If this attribute is not specified, MBS will assume that there are no reserved macro names that could conflict with the build environment variable macros, except names specified in the &quot;buildVariable&quot; attribute of the &quot;InputType&quot; elements: these names will always be treated as reserved
               </documentation>
            </annotation>
         </attribute>
         <attribute name="reservedMacroNameSupplier" type="string">
            <annotation>
               <documentation>
                  Should be set to the name of the class that implements the IReservedMacroNameSupplier interface. If this attribute is specified the reservedMacroNames attribute is ignored, and the following macro names will be treated as reserved:
1. macro names that the IReservedMacroNamesSupplier specifies as reserved
2. a macro name that is equal to one of the build variable names specified int the InputType elements of the tools used in the tool-chain
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.cdt.managedbuilder.macros.IReservedMacroNameSupplier"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="macroInputFileNameValue" type="string">
            <annotation>
               <documentation>
                  Represents the InputFileName macro value. The macro specifies the input file name. The input file has the following meaning:
1. If a tool does not accept building multiple files of the primary input type with one tool invocation, the input file is the file of the primary input type being built.
2. If a tool accepts building multiple files of the primary input type with one tool invocation the input file is undefined and the macros representing the input file contain information about one of the inputs of the primary input type being built.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="macroInputFileExtValue" type="string">
            <annotation>
               <documentation>
                  Represents the InputFileExt macro value. The macro specifies the extension of the input file.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="macroInputFileBaseNameValue" type="string">
            <annotation>
               <documentation>
                  Represents the InputFileBaseName macro value. The macro specifies the base name of the input file. That is the file name with an extension stripped.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="macroInputFileRelPathValue" type="string">
            <annotation>
               <documentation>
                  Represents the InputFileRelPath macro value. The macro specifies the input file path relative to the builder current directory.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="macroInputDirRelPathValue" type="string">
            <annotation>
               <documentation>
                  Represents the InputDirRelPath macro value. The macro specifies the input file directory path relative to the builder current directory.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="macroOutputFileNameValue" type="string">
            <annotation>
               <documentation>
                  Represents the OutputFileName macro value. The macro specifies the output file name. The output file has the following meaning:
1. If a tool is not capable of producing multiple files of the primary output type with one tool invocation the output file is the file of the primary output type that is built with a given tool invocation.
2. If a tool is capable of producing multiple files of the primary output type with one tool invocation the output file is undefined and the macros representing the output file contain information about one of the files of the primary output type that are built with a given tool invocation.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="macroOutputFileExtValue" type="string">
            <annotation>
               <documentation>
                  Represents the OutputFileExt macro value. The macro specifies the output file extension.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="macroOutputFileBaseNameValue" type="string">
            <annotation>
               <documentation>
                  Represents the OutputFileBaseName macro value. The macro specifies the output file base name. That is the output file name with an extension stripped.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="macroOutputFileRelPathValue" type="string">
            <annotation>
               <documentation>
                  Represents the OutputFileRelPath macro value. The macro specifies the output file path relative to the current builder directory.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="macroOutputDirRelPathValue" type="string">
            <annotation>
               <documentation>
                  Represents the OutputDirRelPath macro value. The macro specifies the output file directory path relative to the current builder directory.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="versionsSupported" type="string">
            <annotation>
               <documentation>
                  Specifies a comma delimited list of versions of this builder that can be loaded without invoking a converter.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="convertToId" type="string">
            <annotation>
               <documentation>
                  The identifier of a builder, that builders loaded using this definition should be converted to. MBS will invoke a proper converter.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="supportsManagedBuild" type="boolean">
            <annotation>
               <documentation>
                  Specifies whether the duilder supports managed build. Default value is true.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="autoBuildTarget" type="string">
            <annotation>
               <documentation>
                  represents the build target to be used for auto build
               </documentation>
            </annotation>
         </attribute>
         <attribute name="incrementalBuildTarget" type="string">
            <annotation>
               <documentation>
                  represents the build target to be used for incremental build
               </documentation>
            </annotation>
         </attribute>
         <attribute name="cleanBuildTarget" type="string">
            <annotation>
               <documentation>
                  represents the build target to be used for clean build
               </documentation>
            </annotation>
         </attribute>
         <attribute name="ignoreErrCmd" type="string">
            <annotation>
               <documentation>
                  specifies the &quot;ignore error&quot; builder option.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="parallelBuildCmd" type="string">
            <annotation>
               <documentation>
                  Specifies the command for &quot;parallel build&quot;.
If the builder supports specifying custom number of parallel jobs the option definition may contain &quot;*&quot;. The Build System will substitute the &quot;*&quot; with the number of parallel threads to be used. In case of &quot;unlimited&quot; jobs jobs number will be omitted.
For example, builder representing GNU make would define parallelBuildCmd as &quot;-j*&quot;.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="parallelBuildOn" type="boolean">
            <annotation>
               <documentation>
                  Defines if the parallel build is enabled in newly created project by default (when parallel build is supported). The number of jobs is defined by &quot;parallelizationNumber&quot; attribute. If &quot;parallelizationNumber&quot; is not defined &quot;optimal&quot; value will be used.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="parallelizationNumber" type="string">
            <annotation>
               <documentation>
                  Sets maximum number of parallel threads/jobs to be used by builder (that value can be changed after creation of project by user).
A positive number or value &quot;optimal&quot; or &quot;unlimited&quot; are recognized:
- number 1 will cause parallel build to be turned off,
- &quot;optimal&quot; will set maximum number of jobs to number of processors on the system,
- &quot;unlimited&quot; will make builder to run as many threads/jobs as possible.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isSystem" type="boolean">
            <annotation>
               <documentation>
                  the system elements are used by the system for specific needs and are not displayed in UI
               </documentation>
            </annotation>
         </attribute>
         <attribute name="commandLauncher" type="string">
            <annotation>
               <documentation>
                  A concrete Java class that implements org.eclipse.cdt.core.ICommandLauncher to launch the builder command.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":org.eclipse.cdt.core.ICommandLauncher"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="buildRunner" type="string">
            <annotation>
               <documentation>
                  A runner for the build. Overrides or extends the built-in external and internal build runners.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.cdt.managedbuilder.core.AbstractBuildRunner:"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="targetPlatform">
      <annotation>
         <documentation>
            Represents the os/architecture combination(s) upon which the outputs of a tool-chain can be deployed.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  A unique identifier for the target platform that will be used by the build model.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  Human-readable name for the target platform to be used in the UI.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="superClass" type="string">
            <annotation>
               <documentation>
                  The id of a target platform that this target platform is derived from.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isAbstract" type="boolean" use="default" value="false">
            <annotation>
               <documentation>
                  An optional field that flags a target platform as abstract.  An abstract target platform must be defined as a top level object in the model definition and cannot be selected by the user in the UI, but target platforms derived from this targetPlatform will inherit its attributes and children.  The default is false.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="unusedChildren" type="string">
            <annotation>
               <documentation>
                  A semi-colon separated list of child IDs of the superclass&apos; children that should not be automatically inherited by this element.  Note: This attribute is not yet implemented.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="osList" type="string">
            <annotation>
               <documentation>
                  This field lists the target operating systems on which the outputs of a tool-chain runs.  The value should be a comma-separated list.  Valid values are the strings returned by the Eclipse API Platform.getOS() and include strings like &quot;win32&quot;, &quot;linux&quot;, &quot;solaris&quot;, &quot;hpux&quot;, &quot;aix&quot;.  Do not specify this attribute or specify &quot;all&quot; to allow all target operating systems.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="archList" type="string">
            <annotation>
               <documentation>
                  This field lists the target architectures on which the outputs of a tool-chain runs.  The value should be a comma-separated list.  Valid values are the strings returned by the Eclipse API Platform.getOSArch() and include strings like &quot;ia32&quot;.  Do not specify this attribute or specify &quot;all&quot; to allow all target architectures.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="binaryParser" type="string">
            <annotation>
               <documentation>
                  Set this to the ID of the binary parser for the output format of your configuration.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="dynamicElementProvider">
      <annotation>
         <documentation>
            An optional element that allows a tool implementor to supply a class that creates one or more dynamic toolchain elements. For example, the class might create a new tool reference based on the contents of a special file, and a new target that uses that reference.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The class that implements the &lt;code&gt;IManagedConfigElementProvider&lt;/code&gt; interface. The logic of determining the elements is left to the implementer, but they must be correctly formed or the build model will have trouble loading.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.cdt.managedbuilder.core.IManagedConfigElementProvider"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  A meaningful name for the type of element being provided.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="buildDefinitionStartup">
      <annotation>
         <documentation>
            An optional element that allows a tool implementor to supply a class that insures a plugin that modifies any build configruation attributes (e.g. the build config id) will get loaded before initial project information is created.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The class that implements the &lt;code&gt;IManagedBuildDefinitionsStartup&lt;/code&gt; interface. This class may not actually do anything, but additional initialization can be done here is desired.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.cdt.managedbuilder.core.IManagedBuildDefinitionsStartup"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  A meaningful name for the type of element being provided.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="managedBuildRevision">
      <annotation>
         <documentation>
            &lt;p&gt;
Version identifier for the managed build extension point. It is a string representation, consisting of three (3) tokens separated by a decimal point. The 3 tokens are positive integer numbers. For example, the following are valid version identifiers:
 &lt;ul&gt;
  &lt;li&gt;&lt;code&gt;0.0.0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;1.0.1234&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;1.9&lt;/code&gt; (interpreted as &lt;code&gt;1.9.0&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;3&lt;/code&gt; (interpreted as &lt;code&gt;3.0.0&lt;/code&gt;)&lt;/li&gt;
 &lt;/ul&gt;
&lt;/p&gt;
         </documentation>
      </annotation>
      <complexType>
         <attribute name="fileVersion" type="string" use="required">
            <annotation>
               <documentation>
                  The actual string containing the three version tokens.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="envVarBuildPath">
      <annotation>
         <documentation>
            Defines a set of environment variables used by a tool to represent the build paths (include paths or library paths).
         </documentation>
      </annotation>
      <complexType>
         <attribute name="pathType" use="required">
            <annotation>
               <documentation>
                  The build path type. Can be one of the following: &quot;buildpathInclude&quot;, &quot;buildpathLibrary&quot;
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="buildpathInclude">
                  </enumeration>
                  <enumeration value="buildpathLibrary">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
         <attribute name="variableList" type="string" use="required">
            <annotation>
               <documentation>
                  comma-separated list of the environment variable names used to store the include paths
               </documentation>
            </annotation>
         </attribute>
         <attribute name="pathDelimiter" type="string">
            <annotation>
               <documentation>
                  Represent the delimiter used to separate the paths. If omitted the default system delimiter will be used. That is the &quot;:&quot; for Unix-like systems and the &quot;;&quot; for Win32 systems.
If the &quot;buildPathResolver&quot; attribute is specified, the &quot;pathDelimiter&quot; is ignored
               </documentation>
            </annotation>
         </attribute>
         <attribute name="buildPathResolver" type="string">
            <annotation>
               <documentation>
                  Should be set to the IBuildPathResolver interface that the tool-integrator can supply in order to provide his/her own logic of resolving the variable values to the build paths
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.cdt.managedbuilder.core.IBuildPathResolver"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="enablement">
      <annotation>
         <documentation>
            Contains boolean expression that specifies option applicability
         </documentation>
      </annotation>
      <complexType>
         <choice>
            <element ref="and" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="or" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="not" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="checkOption" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="checkString" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="false" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="checkHolder" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="checkBuildProperty" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="hasNature" minOccurs="0" maxOccurs="unbounded"/>
         </choice>
         <attribute name="type" type="string" use="default" value="ALL">
            <annotation>
               <documentation>
                  Represents the applicability type for this enablement.
Can contain the following values:
UI_VISIBILITY - the given enablement expression specifies whether the option is to be visible in UI,
UI_ENABLEMENT - the given enablement expression specifies the enable state of the controls that represent the option in UI,
CMD_USAGE - the given enablement expression specifies whether the option is to be used in command line
CONTAINER_ATTRIBUTE - the given enablement expressions specifies thecontainer attribute value
ALL - this value means the combination of all the above values.

Several types could be specified simultaneously using the &quot;|&quot; as a delimiter, e.g.:
type=&quot;UI_VISIBILITY|CMD_USAGE&quot;
               </documentation>
            </annotation>
         </attribute>
         <attribute name="attribute">
            <annotation>
               <documentation>
                  This attribute should be used only for the CONTAINER_ATTRIBUTE enablement to specify the name of the attribute for which this enablement applies. Currently the following option attributes are supported:
&quot;command&quot;
&quot;commandFalse&quot;
&quot;defaultValue&quot;
&quot;value&quot;
&quot;artifactExtension&quot;
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="command">
                  </enumeration>
                  <enumeration value="commandFalse">
                  </enumeration>
                  <enumeration value="defaultValue">
                  </enumeration>
                  <enumeration value="value">
                  </enumeration>
                  <enumeration value="artifactExtension">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
         <attribute name="value" type="string">
            <annotation>
               <documentation>
                  This attribute should be used only for the CONTAINER_ATTRIBUTE enablement to specify the value of the attribute specified in the &quot;attribute&quot; for which this enablement applies
               </documentation>
            </annotation>
         </attribute>
         <attribute name="extensionAdjustment" type="boolean">
            <annotation>
               <documentation>
                  The attribute is valid for the CONTAINER_ATTRIBUTE enablement type.
true specifies that the enablement is defined for adjusting extension elements (extension elements are adjusted on tool-chain definition load)
false specifies that the enablement is defined for non-extension elements adjustment. This adjustment is performed, e.g. when the Build properties set is chenged for configuration
Default value is true.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="and">
      <annotation>
         <documentation>
            Represents boolean &quot;and&quot; operation
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="and" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="or" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="not" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="checkOption" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="checkString" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="checkHolder" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="checkBuildProperty" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
      </complexType>
   </element>

   <element name="or">
      <annotation>
         <documentation>
            Represents boolean &quot;or&quot; operation
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="and" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="or" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="not" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="checkOption" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="checkString" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="checkHolder" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="checkBuildProperty" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
      </complexType>
   </element>

   <element name="not">
      <annotation>
         <documentation>
            Represents boolean &quot;not&quot; operation
         </documentation>
      </annotation>
      <complexType>
         <choice>
            <element ref="and" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="or" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="not" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="checkOption" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="checkString" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="checkHolder" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="checkBuildProperty" minOccurs="0" maxOccurs="unbounded"/>
         </choice>
      </complexType>
   </element>

   <element name="checkOption">
      <annotation>
         <documentation>
            Performs an option value check. The option value can be checked either agains some pre-defined value or against the value of another option
         </documentation>
      </annotation>
      <complexType>
         <attribute name="optionId" type="string">
            <annotation>
               <documentation>
                  The option id. The default is the id of the option that holds this expression. When searching for the option to be checked, MBS will examine all the options the holder contains along with all superclasses of each option to find the option with the specified id.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="holderId" type="string">
            <annotation>
               <documentation>
                  The option holder id that holds the option. The default is the id of the holder that holds the container of this expression. When searching for the needed holder, MBS will examine all the holders the current configuration contains along with all superclasses of each holder in order to find the holder with the specified id.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="value" type="string">
            <annotation>
               <documentation>
                  Specifies the expected value. If the current option value matches the value specified in this attribute, the checkOption element is treated as true, otherwise - as false.
The expected value could be specified either as a string that may contain build macros or as a regular expression. During the comparison, the build macros are resolved and the option value is checked to match the resulting string or regular expression. The way the expected value is specified and treated depends on the value of the isRegex attribute
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isRegex" type="string" use="default" value="false">
            <annotation>
               <documentation>
                  Specifies whether the string specified in the &quot;value&quot; attribute should be treated as a regular eexpression. The default is false
               </documentation>
            </annotation>
         </attribute>
         <attribute name="otherOptionId" type="string">
            <annotation>
               <documentation>
                  The id of the option which is to be compared with the option specified with the &quot;optionId&quot; attribute. The default is the id of the option that holds this expression. If the &quot;value&quot; attribute is specified, both the &quot;otherOptionId&quot; and the &quot;otherHolderId&quot; attributes are ignored. When searching for the option to be checked, MBS will examine all the options the holder contains along with all superclasses of each option to find the option with the specified id.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="otherHolderId" type="string">
            <annotation>
               <documentation>
                  The option holder id that holds the option specified with the &quot;otherOptionId&quot; attribute. The default is the id of the holder that holds the container of this expression. If the &quot;value&quot; attribute is specified, both the &quot;otherOptionId&quot; and the &quot;otherHolderId&quot; attributes are ingnored. When searching for the needed holder, MBS will examine all the holders the current configuration contains along with all superclasses of each holder in order to find the holder with the specified id.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="checkString">
      <annotation>
         <documentation>
            Performs a string check.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="string" type="string" use="required">
            <annotation>
               <documentation>
                  Represents the string to be checked. The string will typically  contain the build macros.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="value" type="string" use="required">
            <annotation>
               <documentation>
                  Specifies the expected value. If the current string specified in the &quot;string&quot; attribute matches the value specified in this attribute, the checkString element is treated as true, otherwise - as false.
The expected value could be specified either as a string that might contain the build macros or as a regular expression.
The way the value is specified and treated depends on the value of the isRegex attribute.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="isRegex" type="string" use="default" value="false">
            <annotation>
               <documentation>
                  Specifies whether the string specified in the &quot;value&quot; attribute should be treated as a regular eexpression. The default is false
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="false" type="string">
      <annotation>
         <documentation>
            Represents the &quot;false&quot; value. This element can be used as a direct child of the &quot;enablement&quot; element to represent that the given option applicability is disabled. E.g. to specify that the option is never displayed in UI or never used in the command line.
         </documentation>
      </annotation>
   </element>

   <element name="checkHolder">
      <annotation>
         <documentation>
            Performs the holder check.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="holderId" type="string" use="required">
            <annotation>
               <documentation>
                  Specifies the holder id to be checked. The checkHolder is treated as true if the id specified in this attribute matches with the option&apos;s holder id or the id of some holder&apos;s super-class. Otherwise the checkHolder is treated as false.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="checkBuildProperty">
      <annotation>
         <documentation>
            Performs the Build Property check
         </documentation>
      </annotation>
      <complexType>
         <attribute name="property" type="string">
            <annotation>
               <documentation>
                  specifies the id of the Build Property to be checked
               </documentation>
            </annotation>
         </attribute>
         <attribute name="value" type="string">
            <annotation>
               <documentation>
                  Specifies the Build Property Value id to be checked
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="supportedProperties">
      <annotation>
         <documentation>
            contains the list of supported properties
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="property"/>
         </sequence>
      </complexType>
   </element>

   <element name="property">
      <annotation>
         <documentation>
            contains the supported values for the property
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="value" minOccurs="1" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  the property type id
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="folderInfo">
      <annotation>
         <documentation>
            Represents per-folder settings.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="toolChain"/>
         </sequence>
         <attribute name="resourcePath" type="string" use="required">
            <annotation>
               <documentation>
                  Project-relative resource path
               </documentation>
            </annotation>
         </attribute>
         <attribute name="exclude" type="boolean">
            <annotation>
               <documentation>
                  Specifies whether the resource is excluded from building in the parent configuration.  The default is false.  The resourceConfiguration element retains its tool children, if any exist, even when excluded from the build.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="fileInfo">
      <annotation>
         <documentation>
            Represents per-file settings.
This element has the same meaning as resourceConfiguration.
It is added for consistency with the folderInfo element.
The only difference between this element and the resourceConfiguration is that resourceConfiguration specifies the resource full path, while the fileInfo specifies project-relative resource path in the same way as the folderInfo does.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="resourcePath" type="string">
            <annotation>
               <documentation>
                  Project-relative resource path
               </documentation>
            </annotation>
         </attribute>
         <attribute name="exclude" type="boolean">
            <annotation>
               <documentation>
                  Specifies whether the resource is excluded from building in the parent configuration.  The default is false.  The resourceConfiguration element retains its tool children, if any exist, even when excluded from the build.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="rcbsApplicability">
            <annotation>
               <documentation>
                  Identifies how the user desires to apply a resource custom build step:
     1.  Apply rcbs tool before any other tools defined for the resource.
     2.  Apply rcbs tool after any other tools defined for the resource.
     3.  Apply rcbs tool overriding any other tools defined for the resource.
     4.  Disable (don&apos;t apply) the rcbs tool.
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="before">
                  </enumeration>
                  <enumeration value="after">
                  </enumeration>
                  <enumeration value="override">
                  </enumeration>
                  <enumeration value="disable">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
         <attribute name="toolsToInvoke" type="string">
            <annotation>
               <documentation>
                  Identifies which tools to invoke by a semicolon separated list of child tool ids.  Applies as follows:
     1.  Defaults to all tools in the order found
     2.  Use specified ordered list of children to invoke
     3.  If empty string, treat as if no resource configuration existed, i.e., use project level tool.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="hasNature">
      <annotation>
         <documentation>
            Checks whether the project containing the resource has a given nature
         </documentation>
      </annotation>
      <complexType>
         <attribute name="natureId" type="string">
            <annotation>
               <documentation>
                  The id of the nature
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         This extension point was added in CDT 2.1
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         [Enter examples here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="apiInfo"/>
      </appinfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="implementation"/>
      </appinfo>
      <documentation>
         An implementation of this extension point is supplied in &lt;samp&gt;org.eclipse.cdt.ui&lt;/samp&gt;
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="copyright"/>
      </appinfo>
      <documentation>
         Copyright (c) 2003, 2006 IBM Corporation and others.
This program and the accompanying materials are made available under the terms of the Eclipse Public License 2.0 which accompanies this distribution, and is available on the &lt;a href=&quot;http://www.eclipse.org/legal/epl-2.0/&quot;&gt; Eclipse&lt;/a&gt; website.
      </documentation>
   </annotation>

</schema>
