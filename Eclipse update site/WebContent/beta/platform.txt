# Teensy compile variables
# --------------------- 

name=Teensy Boards
compiler.c.cmd=avr-gcc
compiler.c.flags=-c -g -Os -w -ffunction-sections -fdata-sections -MMD
compiler.c.elf.flags=-Os -Wl,--gc-sections
compiler.c.elf.cmd=avr-gcc
compiler.S.flags=-c -g -assembler-with-cpp
compiler.cpp.cmd=avr-g++
compiler.cpp.flags=-c -g -Os -w -fno-exceptions -ffunction-sections -fdata-sections -MMD
compiler.ar.cmd=avr-ar
compiler.ar.flags=rcs
compiler.objcopy.cmd=avr-objcopy
compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0
compiler.elf2hex.flags=-O ihex -R .eeprom
compiler.elf2hex.cmd=avr-objcopy
compiler.ldflags=
compiler.size.cmd=avr-size
archive_file=teensy.ar
build.extra_flags=

compiler.path={runtime.ide.path}/hardware/tools/avr/bin/


compiler.sam.path={runtime.hardware.path}/teensy/tools/mac/arm-none-eabi/bin/
compiler.sam.path.linux={runtime.hardware.path}/teensy/tools/linux/arm-none-eabi/bin/
compiler.sam.path.windows={runtime.hardware.path}/teensy/tools/windows/arm-none-eabi/bin/

# AVR compile patterns
# --------------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -mmcu={build.mcu} {build.define0} {build.define1} -DF_CPU={build.f_cpu} -D{software}={runtime.ide.version} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -mmcu={build.mcu} {build.define0} {build.define1} -DF_CPU={build.f_cpu} -D{software}={runtime.ide.version} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} "{build.path}/{archive_file}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" {compiler.c.elf.flags} -mmcu={build.mcu} -o "{build.path}/{build.project_name}.elf" {object_files} "{build.path}/{archive_file}" "-L{build.path}" -lm

## Create eeprom
recipe.objcopy.eep.pattern="{compiler.path}{compiler.objcopy.cmd}" {compiler.objcopy.eep.flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.eep"

## Create hex
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Compute size
#recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.hex"
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" --format=avr --mcu={build.mcu} "{build.path}/{build.project_name}.elf"
recipe.size.regex=Total\s+([0-9]+).*


# Teensy Uploader/Programmers tools
# -------------------

tools.teensy_reboot.config.path={runtime.hardware.path}/teensy/tools/mac
tools.teensy_reboot.config.path.linux={runtime.hardware.path}/teensy/tools/linux
tools.teensy_reboot.config.path.windows={runtime.hardware.path}/teensy/tools/windows


tools.teensy_reboot.upload.params.verbose=
tools.teensy_reboot.upload.params.quiet=
tools.teensy_reboot.cmd.path={tools.teensy_reboot.config.path}/
tools.teensy_reboot.name=Teensy upload
tools.teensy_reboot.step1.pattern={tools.teensy_reboot.cmd.path}teensy_post_compile -path={build.path} -file={build.project_name} -tools={tools.teensy_reboot.config.path} -board={name}
tools.teensy_reboot.step1.name=Teensy post compile
tools.teensy_reboot.step2.pattern={tools.teensy_reboot.cmd.path}teensy_reboot -v
tools.teensy_reboot.step2.name=Teensy reboot

